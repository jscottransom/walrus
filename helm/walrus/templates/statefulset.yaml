apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "walrus.fullname" . }}
  labels:
    {{- include "walrus.labels" . | nindent 4 }}
spec:
  serviceName: {{ include "walrus.fullname" . }}-headless
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "walrus.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "walrus.selectorLabels" . | nindent 8 }}
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "walrus.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args:
            - "--node-id"
            - "walrus-$(hostname | sed 's/walrus-//')"
            - "--bind-addr"
            - "0.0.0.0:8080"
            - "--data-dir"
            - "{{ .Values.config.dataDir }}"
            - "--max-segment-bytes"
            - "{{ .Values.config.maxSegmentBytes | quote }}"
            - "--max-index-bytes"
            - "{{ .Values.config.maxIndexBytes | quote }}"
            - "--election-timeout-ms"
            - "{{ .Values.config.electionTimeoutMs | quote }}"
            - "--heartbeat-interval-ms"
            - "{{ .Values.config.heartbeatIntervalMs | quote }}"
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /ready
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: data
              mountPath: {{ .Values.config.dataDir }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  {{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        {{- if .Values.persistence.storageClass }}
        storageClassName: {{ .Values.persistence.storageClass }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size }}
  {{- end }}
